<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
    </head>
    <body>
       <?php
        //【サンプル】
 
        //DB接続設定
        //データソース名
        //SQLとは、構造問い合わせ言語という意味である。データベースへ指示を出す言語のことである。
        //リレーショナルデータベースのデータを操作するための言語である。
        //DDL(データ定義言語)：データベースの定義や作成にかかわる命令文(外枠ってことかな)
        //　CREATE：データベースの定義や作成にかかわる命令文
        //　DROP：データベースやテーブルの削除
        //　ALTER：データベースやテーブルの変更
        //　JOIN：テーブルの結合
        //　TRUNCATE：テーブルのデータを削除

        //DML(データ操作言語)：データの取得・登録・更新・削除などのデータ操作(中身の操作のシステムづくりかな)
        //　SELECT：データ取得
        //　UPDATE：データ更新
        //　DELETE：データ削除
        //　INSERT：データ挿入
        
        //DCL(データ制御言語)：主にトランザクションの制御やデータベースへのアクセスを制御するためのコマンド
        //トランザクション：一連の処理をひとまとめにしたもの。
        //　BEGIN：トランザクション開始
        //　COMMIT：実行した処理の確定
        //　ROLLBACK；データの戻し
        //　GRANT；ユーザー権限付与
        //　REVOKE：ユーザー権限はく奪

        $dsn='mysql:dbname=データベース名;host=localhost';
        $user='ユーザー名';
        $password='パスワード';
        //PHP Data Objectsの略。データベースに接続するための言葉。
        //インスタンスというのはデータベース全般のサービスのこと。SQL Serverの実行単位である。インストールされたSQL　Serverの実態のことであり、エンジンの実行単位である。
        //SQL Serverのプログラムを一つインストールするとインスタンスごとに固有のフォルダ中に実行ファイル郡(サービスの実態)
        //がコピーされ、サービスとして実行されるようになる。インスタンスごとに1プロセス(SQL Serverサービス)が作成され、インスタン単位ごとに実行停止可能。、
        //書き方：インスタンス名=new PDO("データベースの種類:host=接続先アドレス,db=データベース名前
        //　charset=文字エンコード" "ユーザー名","パスワード",オプション)
        //でもここだと　new PDO =("データベースの種類:host=接続先アドレス,ユーザー名,パスワード,オプション)
        //データベースに接続した後にオプションを指定する際は、
        //$pdo->setAttribute(属性,値)
        //PDO::ATTER_ERRMODE,PDO::ERRMODE_EXCEPTION)を設定することで、エラーが発生した時にPDOExceptionの例外を投げてくれる。
        $pdo= new PDO($dsn,$user,$password,array(PDO::ATTR_ERRMODE=>PDO::ERRMODE_WARNING));

  //このプログラムを実行することにデータが一軒ずつ登録される。このデータ＝レコード
    $name='まさみん3';
    $comment='techbase頑張って6-2終わらせるぞ！！！';
    //INSERT INTO テーブル名 (列名1,列名2,...) VALUES(値1,値2,...)

    $sql="INSERT INTO tbtest(name, comment) VALUES(:name, :comment)";
    //bindParam()関数とは、プリペアドステートメントで使用するSQL文の中でプレースホルダーに値をバインドするための関数
    //値の参照を受け取る点、execute()関数を使用した際にバインドが確定するという点でbindValue関数と異なる。
    //prepare()関数はSQL文の基本部分が同じで値だけ異なる場合(同じテーブルに値だけ変えて何回もデータを挿入する場合)に向いている
    //queryは変動値が無いときに使う
    $stmt=$pdo->prepare($sql);
    //バインド変数とはプログラミング言語の実行環境からデータベース管理システム(DBMS)へSQL文を発行する際、一部を動的に変更できる変数にする機能
    //その部分に後から代入や変更を行ってもSQL文の再生成や解釈をし直す必要がない。(プリペアードステートメント)
    //使い方は　bindPARAM($パラメータID,$バインドする変数[,$PDOデータ型定数[,$PDOデータ型の長さ[,$ドライバーオプション]]])
    //第1因数にはパラメータIDを使用する。これはプレースホルダの種類で指定方法が異なる
    //プレースホルダ(INSERTのVALUEで指定した値)が？(疑問符プレースホルダー)ならパラメータIDには1から始まる整数値で「？」の位置を指定する bindPARAM(1...)
    //プレースホルダが「:id」のような名前で指定する場合(名前付きプレースホルダ)の場合はプレースホルダと同じ「:id」を使用
    //第2因数にはバインドする、入力したい変数を渡す。
    //第3因数にはオプションでバインドする値に対して明示的にデータ型を示せる。
    //指定方法には「PDO::PARAM_(定数)」を指定する。デフォルトはPDO::PARAM_STR
    //第4因数にはオプションでバインドする値のデータ型の長さを指定できる。
    //第5因数はドライバー固有のオプションが付けられる。
    //PDO::PARAM_STR(int)というのは、SQL CHAR, VARCHAR, 他の文字列データである。
    //CHAR型とは、あらかじめ指定した文字数の領域を固定的に確保する
    //VARCHAR2型は文字列を格納するのに必要な文字数分の領域しか確保しない。
    //メモリ消費は後者が少ないが、文字列がが変化して増えたときに格納できるのは前者
    $stmt->bindParam(':name',$name, PDO::PARAM_STR);
    $stmt->bindParam(':comment',$comment, PDO::PARAM_STR);
    //プリペアードステートメントを実行する際にexecuteが使われる。
    $stmt->execute();
    //bindParamの引数名(:nameなど)はテーブルのカラム名に合わせるとミスが少ない。
        ?>
